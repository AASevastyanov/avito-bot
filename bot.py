import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    FSInputFile,
    InputMediaPhoto
)
from aiogram.filters import Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
DEBUG = os.getenv('DEBUG', 'False')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# ---------- –°–æ—Å—Ç–æ—è–Ω–∏—è ----------
class OrderStates(StatesGroup):
    waiting_for_order_info = State()
    waiting_for_filling_choice_little = State()  # –ú–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ
    waiting_for_filling_choice_snow = State()  # –¢—ë–ø–ª—ã–π —Å–Ω–µ–≥
    waiting_for_filling_choice_magic_1 = State()  # –°–µ–º–µ–π–Ω–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ - –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä
    waiting_for_filling_choice_magic_2 = State()  # –°–µ–º–µ–π–Ω–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ - –≤—Ç–æ—Ä–æ–π –≤—ã–±–æ—Ä


class QuestionStates(StatesGroup):
    waiting_for_question = State()


# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
town_answers = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–î–∞!', callback_data='main_menu')],
        [InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥', callback_data='no_variant')]
    ]
)

main_menu_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="1. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞–±–æ—Ä–∞—Ö üè†", callback_data="details")],
        [InlineKeyboardButton(text="2. –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å ‚ùì", callback_data="other_question")],
        [InlineKeyboardButton(text="3. –ê–∫—Ü–∏–∏ ‚≠ê", callback_data="actions")],
        [InlineKeyboardButton(text="4. –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ üéÅ", callback_data="preorder")]
    ]
)

sets_menu_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="1. ¬´–ú–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ ‚ú®¬ª (1000 —Ä—É–±)", callback_data="set_1")],
        [InlineKeyboardButton(text="2. ¬´–¢—ë–ø–ª—ã–π —Å–Ω–µ–≥ ‚ùÑÔ∏è¬ª (1500 —Ä—É–±)", callback_data="set_2")],
        [InlineKeyboardButton(text="3. ¬´–°–µ–º–µ–π–Ω–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ ü™Ñ¬ª (2000 —Ä—É–±)", callback_data="set_3")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
)


def set_detail_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚úÖ", callback_data="order"),
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_sets")
            ]
        ]
    )


order_confirm_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞!", callback_data="order_yes"),
            InlineKeyboardButton(text="–Ø –ø–æ–¥—É–º–∞—é", callback_data="order_think_again")
        ]
    ]
)

other_question_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
)

after_order_main_menu_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
)

actions_menu_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞ ‚ú®", callback_data="action_card")],
        [InlineKeyboardButton(text="–í—Ä–µ–º—è-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è ‚è∞", callback_data="action_limited")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
)


def action_back_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="actions")]
        ]
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è
# –ú–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ
little_choice_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ï–ª–æ—á–∫–∞ üéÑ", callback_data="little_–µ–ª–æ—á–∫–∞")],
        [InlineKeyboardButton(text="–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —à–∞—Ä–∏–∫ ‚ùÑÔ∏è", callback_data="little_—à–∞—Ä–∏–∫")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="little_back")]
    ]
)

# –¢—ë–ø–ª—ã–π —Å–Ω–µ–≥
snow_choice_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û–±—ã—á–Ω—ã–π –¥–æ–º–∏–∫ üè°", callback_data="snow_ex1")],
        [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π –¥–æ–º–∏–∫ üè† (+M&M's)", callback_data="snow_ex2")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="snow_back")]
    ]
)

# –°–µ–º–µ–π–Ω–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ - –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä
magic_first_choice_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û–±—ã—á–Ω—ã–π –¥–æ–º–∏–∫ üè°", callback_data="magic1_ex1")],
        [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π –¥–æ–º–∏–∫ üè† (+M&M's)", callback_data="magic1_ex2")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="magic1_back")]
    ]
)

# –°–µ–º–µ–π–Ω–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ - –≤—Ç–æ—Ä–æ–π –≤—ã–±–æ—Ä
magic_second_choice_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="2 –ø—Ä—è–Ω–∏—á–Ω—ã—Ö —á–µ–ª–æ–≤–µ—á–∫–∞", callback_data="magic2_ex1")],
        [InlineKeyboardButton(text="–ï–ª–æ—á–∫–∞ üéÑ", callback_data="magic2_ex2")],
        [InlineKeyboardButton(text="–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —à–∞—Ä–∏–∫ ‚ùÑÔ∏è", callback_data="magic2_ex3")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="magic2_back")]
    ]
)

# ---------- –î–∞–Ω–Ω—ã–µ –æ –Ω–∞–±–æ—Ä–∞—Ö ----------
sets_data = {
    "set_1": {
        "name": "–ú–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ",
        "price": 1000,
        "description": (
            "–ù–∞–±–æ—Ä ¬´–ú–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ ‚ú®¬ª (1000 —Ä—É–±):\n"
            "‚Ä¢ ü•Æ–ò–º–±–∏—Ä–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ–∫\n"
            "‚Ä¢ ü•Æ–ò–º–±–∏—Ä–Ω–æ–µ –ø–µ—á–µ–Ω—å–µ (—ë–ª–æ—á–∫–∞ –∏–ª–∏ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π —à–∞—Ä–∏–∫)\n"
            "‚Ä¢ üç´2 —à–æ–∫–æ–ª–∞–¥–∫–∏ Kinder\n"
            "‚Ä¢ üç≠–õ–µ–¥–µ–Ω–µ—Ü\n"
            "‚Ä¢ üéÑ–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —à–∞—Ä–∏–∫\n"
            "‚Ä¢ ‚ùÑÔ∏è–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–Ω–µ–≥, –º–∏—à—É—Ä–∞ –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞"
        ),
        "image_path": "images/set_1.jpg"
    },
    "set_2": {
        "name": "–¢—ë–ø–ª—ã–π —Å–Ω–µ–≥",
        "price": 1500,
        "description": (
            "¬´–¢—ë–ø–ª—ã–π —Å–Ω–µ–≥ ‚ùÑÔ∏è¬ª (1500 —Ä—É–±):\n"
            "‚Ä¢ üè†–ù–∞–±–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä—è–Ω–∏—á–Ω–æ–≥–æ –¥–æ–º–∏–∫–∞(–Ω–∞ –≤—ã–±–æ—Ä)\n"
            "‚Ä¢ ü•Æ–ò–º–±–∏—Ä–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ–∫\n"
            "‚Ä¢ üç´4 —à–æ–∫–æ–ª–∞–¥–∫–∏ Kinder\n"
            "‚Ä¢ üç≠–ó–µ–ª—ë–Ω—ã–π –ª–µ–¥–µ–Ω–µ—Ü\n"
            "‚Ä¢ üéÑ–ö—Ä–∞—Å–Ω—ã–π –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π —à–∞—Ä–∏–∫\n"
            "‚Ä¢ ‚ùÑÔ∏è–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–Ω–µ–≥, –º–∏—à—É—Ä–∞ –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞\n"
            "‚Ä¢ üéÑ–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Å–∞–Ω–∫–∏(–Ω–∞ –µ–ª–∫—É)"

        ),
        "image_path": "images/set_2.jpg"
    },
    "set_3": {
        "name": "–°–µ–º–µ–π–Ω–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ",
        "price": 2000,
        "description": (
            "¬´–°–µ–º–µ–π–Ω–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ ü™Ñ¬ª (2000 —Ä—É–±):\n"
            "‚Ä¢ üè†–ù–∞–±–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä—è–Ω–∏—á–Ω–æ–≥–æ –¥–æ–º–∏–∫–∞(–Ω–∞ –≤—ã–±–æ—Ä)\n"
            "‚Ä¢ ü•Æ1 –∏–º–±–∏—Ä–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ–∫\n"
            "  –ù–∞ –≤—ã–±–æ—Ä(+2 —á–µ–ª–æ–≤–µ—á–∫–∞, —ë–ª–æ—á–∫–∞ –∏–ª–∏ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π —à–∞—Ä–∏–∫)\n"
            "‚Ä¢ üç´6 —à–æ–∫–æ–ª–∞–¥–æ–∫ Kinder\n"
            "‚Ä¢ üç≠2 –∑–µ–ª—ë–Ω—ã—Ö –ª–µ–¥–µ–Ω—Ü–∞\n"
            "‚Ä¢ üéÑ2 –∫—Ä–∞—Å–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö —à–∞—Ä–∏–∫–∞\n"
            "‚Ä¢ ‚ùÑÔ∏è–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–Ω–µ–≥, –º–∏—à—É—Ä–∞ –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞"
            "‚Ä¢ üéÑ–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Å–∞–Ω–∫–∏(–Ω–∞ –µ–ª–∫—É)"
        ),
        "image_path": "images/set_3.jpg"
    }
}


# ---------- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
@dp.message(Command("start"))
async def start_command(message: Message):
    photo_file = FSInputFile("images/start_img.jpg")  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É example.png
    await message.answer(
        photo=photo_file,
        caption=(
            "üéÑ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "- –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–∏—Ö –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö\n"
            "- –ó–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
            "- –£–∑–Ω–∞—Ç—å –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö\n"
            "- –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –∏ –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–µ–±—è –∏–ª–∏ –±–ª–∏–∑–∫–∏—Ö!\n\n"
            "–ù–∞—á–Ω–µ–º —Å –≥–ª–∞–≤–Ω–æ–≥–æ, –í—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –≤ –ö–∞–∑–∞–Ω–∏?"
        ),
        reply_markup=town_answers
    )


@dp.callback_query()
async def handle_callbacks(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    logger.info(f"Received callback data: {data}")
    try:
        if data == "main_menu":
            await callback.message.edit_text(
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ò—Ç–∞–∫, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                reply_markup=main_menu_kb
            )

        elif data == 'no_variant':
            await callback.message.edit_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à —Å–∞–Ω—Ç–∞ –ø–æ–∫–∞ –ª–µ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ö–∞–∑–∞–Ω–∏ :)"
            )

        elif data == "details":
            await callback.message.edit_text(
                "–°—É–ø–µ—Ä! –û –∫–∞–∫–æ–º –Ω–∞–±–æ—Ä–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
                reply_markup=sets_menu_kb
            )

        elif data == "other_question":
            await callback.message.edit_text(
                "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –Ω–∞—à–µ–º—É –ø–æ–º–æ—â–Ω–∏–∫—ÉüéÖ "
                "–û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
                reply_markup=other_question_kb
            )
            await state.set_state(QuestionStates.waiting_for_question)

        elif data == "actions":
            await callback.message.edit_text(
                "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–∏—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö‚≠ê",
                reply_markup=actions_menu_kb
            )

        elif data == "action_card":
            await callback.message.edit_text(
                "–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞ ‚ú®:\n\n–î–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –¥–æ 15 –¥–µ–∫–∞–±—Ä—è –º—ã –º–æ–∂–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ä–æ–±–∫–µ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
                reply_markup=action_back_kb()
            )

        elif data == "action_limited":
            await callback.message.edit_text(
                "–í—Ä–µ–º—è-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è ‚è∞:\n\n–î–ª—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –¥–æ 15 –¥–µ–∫–∞–±—Ä—è ‚Äî 4 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–æ–∫–æ–ª–∞–¥–∫–∏ Kinder –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã!",
                reply_markup=action_back_kb()
            )

        elif data == "preorder":
            await callback.message.edit_text(
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æüéÅ! –ö–∞–∫–æ–π –Ω–∞–±–æ—Ä –≤—ã –≤—ã–±—Ä–∞–ª–∏?",
                reply_markup=sets_menu_kb
            )

        elif data == "back_to_main":
            await state.clear()
            await callback.message.edit_text(
                "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?",
                reply_markup=main_menu_kb
            )

        elif data in ["set_1", "set_2", "set_3"]:
            await state.update_data(chosen_set=data)
            set_info = sets_data[data]
            await callback.message.delete()
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —á–µ—Ä–µ–∑ media group
                media = [
                    InputMediaPhoto(
                        media=FSInputFile(set_info['image_path']),
                        caption=set_info['description']
                    )
                ]
                # –°–æ–∑–¥–∞–µ–º –∞–ª—å–±–æ–º (media group)
                media_group = [
                    InputMediaPhoto(media=FSInputFile(set_info['image_path']), caption=set_info['description'])]
                sent_messages = await bot.send_media_group(
                    chat_id=callback.message.chat.id,
                    media=media_group
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
                photo_ids = [msg.message_id for msg in sent_messages]
                await state.update_data(photo_messages=photo_ids)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–ª—å–±–æ–º–∞
                await bot.send_message(
                    chat_id=callback.message.chat.id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=set_detail_kb()
                )
            except Exception as e:
                logger.error(f"Error sending set details: {e}")
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()

        elif data == "back_to_sets":
            await delete_photo_messages(state, callback)
            await callback.message.delete()
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text="–°—É–ø–µ—Ä! –û –∫–∞–∫–æ–º –Ω–∞–±–æ—Ä–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
                reply_markup=sets_menu_kb
            )

        elif data == "order":
            user_data = await state.get_data()
            chosen_set_key = user_data.get("chosen_set")
            if not chosen_set_key:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return

            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await delete_photo_messages(state, callback)
            try:
                await callback.message.delete()
            except Exception as e:
                logger.warning(f"Failed to delete callback message: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ —Ñ–æ—Ç–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–±–æ—Ä–∞ —á–µ—Ä–µ–∑ media group
            photo_ids = []
            try:
                if chosen_set_key == "set_1":
                    # –ú–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ: 1 —Ñ–æ—Ç–∫–∞ example_1.jpg
                    media_group = [
                        InputMediaPhoto(
                            media=FSInputFile("images/choice_tree.jpg"),
                            caption="–ö–∞–∫—É—é –ø–µ—á–µ–Ω—å–∫—É –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤ –≤–∞—à–µ–º –Ω–∞–±–æ—Ä–µ?"
                        )
                    ]
                    sent_messages = await bot.send_media_group(
                        chat_id=callback.message.chat.id,
                        media=media_group
                    )
                    photo_ids = [msg.message_id for msg in sent_messages]
                    await state.update_data(photo_messages=photo_ids)
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:",
                        reply_markup=little_choice_kb
                    )

                elif chosen_set_key == "set_2":
                    # –¢—ë–ø–ª—ã–π —Å–Ω–µ–≥: 2 —Ñ–æ—Ç–∫–∏ example_2.jpg –∏ example_3.jpg
                    media_group = [
                        InputMediaPhoto(media=FSInputFile("images/home_1.jpg")),
                        InputMediaPhoto(media=FSInputFile("images/home_2.jpg"),
                                        caption="–ö–∞–∫–æ–π –¥–æ–º–∏–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤ –≤–∞—à–µ–º –Ω–∞–±–æ—Ä–µ?")
                    ]
                    sent_messages = await bot.send_media_group(
                        chat_id=callback.message.chat.id,
                        media=media_group
                    )
                    photo_ids = [msg.message_id for msg in sent_messages]
                    await state.update_data(photo_messages=photo_ids)
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:",
                        reply_markup=snow_choice_kb
                    )

                elif chosen_set_key == "set_3":
                    # –°–µ–º–µ–π–Ω–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ: –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä - 2 —Ñ–æ—Ç–∫–∏ example_2.jpg –∏ example_3.jpg
                    media_group = [
                        InputMediaPhoto(media=FSInputFile("images/home_1.jpg")),
                        InputMediaPhoto(media=FSInputFile("images/home_2.jpg"),
                                        caption="–ö–∞–∫–æ–π –¥–æ–º–∏–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤ –≤–∞—à–µ–º –Ω–∞–±–æ—Ä–µ?")
                    ]
                    sent_messages = await bot.send_media_group(
                        chat_id=callback.message.chat.id,
                        media=media_group
                    )
                    photo_ids = [msg.message_id for msg in sent_messages]
                    await state.update_data(photo_messages=photo_ids)
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä):",
                        reply_markup=magic_first_choice_kb
                    )
            except Exception as e:
                logger.error(f"Error sending filling choice photos: {e}")
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()

        elif data == "order_think_again":
            await delete_photo_messages(state, callback)
            await callback.message.delete()
            user_data = await state.get_data()
            chosen_set = user_data.get("chosen_set", None)
            if chosen_set:
                set_info = sets_data[chosen_set]
                try:
                    media_group = [
                        InputMediaPhoto(
                            media=FSInputFile(set_info['image_path']),
                            caption=set_info['description']
                        )
                    ]
                    sent_messages = await bot.send_media_group(
                        chat_id=callback.message.chat.id,
                        media=media_group
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
                    photo_ids = [msg.message_id for msg in sent_messages]
                    await state.update_data(photo_messages=photo_ids)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–ª—å–±–æ–º–∞
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=set_detail_kb()
                    )
                except Exception as e:
                    logger.error(f"Error sending set details again: {e}")
                    await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    await state.clear()
            else:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "–ú–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ"
        elif data in ["little_–µ–ª–æ—á–∫–∞", "little_—à–∞—Ä–∏–∫", "little_back"]:
            await delete_photo_messages(state, callback)
            await callback.message.delete()
            if data == "little_back":
                # –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é –Ω–∞–±–æ—Ä–∞
                user_data = await state.get_data()
                chosen_set_key = user_data.get("chosen_set")
                set_info = sets_data[chosen_set_key]
                try:
                    media_group = [
                        InputMediaPhoto(
                            media=FSInputFile(set_info['image_path']),
                            caption=set_info['description']
                        )
                    ]
                    sent_messages = await bot.send_media_group(
                        chat_id=callback.message.chat.id,
                        media=media_group
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
                    photo_ids = [msg.message_id for msg in sent_messages]
                    await state.update_data(photo_messages=photo_ids)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–ª—å–±–æ–º–∞
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=set_detail_kb()
                    )
                except Exception as e:
                    logger.error(f"Error sending set details on little_back: {e}")
                    await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    await state.clear()
            else:
                # –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç
                filling_choice = data.replace("little_", "")
                await state.update_data(filling_choice_little=filling_choice)
                await send_booking_options(callback, state)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "–¢—ë–ø–ª—ã–π —Å–Ω–µ–≥"
        elif data in ["snow_ex1", "snow_ex2", "snow_back"]:
            await delete_photo_messages(state, callback)
            await callback.message.delete()
            if data == "snow_back":
                # –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é –Ω–∞–±–æ—Ä–∞
                user_data = await state.get_data()
                chosen_set_key = user_data.get("chosen_set")
                set_info = sets_data[chosen_set_key]
                try:
                    media_group = [
                        InputMediaPhoto(
                            media=FSInputFile(set_info['image_path']),
                            caption=set_info['description']
                        )
                    ]
                    sent_messages = await bot.send_media_group(
                        chat_id=callback.message.chat.id,
                        media=media_group
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
                    photo_ids = [msg.message_id for msg in sent_messages]
                    await state.update_data(photo_messages=photo_ids)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–ª—å–±–æ–º–∞
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=set_detail_kb()
                    )
                except Exception as e:
                    logger.error(f"Error sending set details on snow_back: {e}")
                    await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    await state.clear()
            else:
                # –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç
                snow_choice = data.replace("snow_", "")
                await state.update_data(filling_choice_snow=snow_choice)
                await send_booking_options(callback, state)

        # –°–µ–º–µ–π–Ω–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ - –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä
        elif data in ["magic1_ex1", "magic1_ex2", "magic1_back"]:
            await delete_photo_messages(state, callback)
            await callback.message.delete()
            if data == "magic1_back":
                # –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é –Ω–∞–±–æ—Ä–∞
                user_data = await state.get_data()
                chosen_set_key = user_data.get("chosen_set")
                set_info = sets_data[chosen_set_key]
                try:
                    media_group = [
                        InputMediaPhoto(
                            media=FSInputFile(set_info['image_path']),
                            caption=set_info['description']
                        )
                    ]
                    sent_messages = await bot.send_media_group(
                        chat_id=callback.message.chat.id,
                        media=media_group
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
                    photo_ids = [msg.message_id for msg in sent_messages]
                    await state.update_data(photo_messages=photo_ids)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–ª—å–±–æ–º–∞
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=set_detail_kb()
                    )
                except Exception as e:
                    logger.error(f"Error sending set details on magic1_back: {e}")
                    await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    await state.clear()
            else:
                # –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç
                magic_choice_1 = data.replace("magic1_", "")
                await state.update_data(magic_choice_1=magic_choice_1)
                # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –≤—ã–±–æ—Ä —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
                try:
                    media_group = [
                        InputMediaPhoto(media=FSInputFile("images/choice_cookies.jpg")),
                        InputMediaPhoto(media=FSInputFile("images/choice_tree.jpg"),
                                        caption="–í –Ω–∞–±–æ—Ä–µ 1 –∏–º–±–∏—Ä–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ–∫, + –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä:")
                    ]
                    sent_messages = await bot.send_media_group(
                        chat_id=callback.message.chat.id,
                        media=media_group
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
                    photo_ids = [msg.message_id for msg in sent_messages]
                    await state.update_data(photo_messages=photo_ids)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:",
                        reply_markup=magic_second_choice_kb
                    )
                    await state.set_state(OrderStates.waiting_for_filling_choice_magic_2)
                except Exception as e:
                    logger.error(f"Error sending magic2 photos: {e}")
                    await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ç–æ—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    await state.clear()

        # –°–µ–º–µ–π–Ω–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ - –≤—Ç–æ—Ä–æ–π –≤—ã–±–æ—Ä
        elif data in ["magic2_ex1", "magic2_ex2", "magic2_ex3", "magic2_back"]:
            await delete_photo_messages(state, callback)
            await callback.message.delete()
            if data == "magic2_back":
                # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –≤—ã–±–æ—Ä—É
                try:
                    media_group = [
                        InputMediaPhoto(media=FSInputFile("images/home_1.jpg")),
                        InputMediaPhoto(media=FSInputFile("images/home_2.jpg"),
                                        caption="–ö–∞–∫–æ–π –¥–æ–º–∏–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤ –≤–∞—à–µ–º –Ω–∞–±–æ—Ä–µ?")
                    ]
                    sent_messages = await bot.send_media_group(
                        chat_id=callback.message.chat.id,
                        media=media_group
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
                    photo_ids = [msg.message_id for msg in sent_messages]
                    await state.update_data(photo_messages=photo_ids)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä):",
                        reply_markup=magic_first_choice_kb
                    )
                    await state.set_state(OrderStates.waiting_for_filling_choice_magic_1)
                except Exception as e:
                    logger.error(f"Error sending magic1 photos on magic2_back: {e}")
                    await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–µ—Ä–≤–æ–º—É –≤—ã–±–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    await state.clear()
            else:
                # –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç
                magic_choice_2 = data.replace("magic2_", "")
                await state.update_data(magic_choice_2=magic_choice_2)
                await send_booking_options(callback, state)

        elif data == "order_yes":
            user_data = await state.get_data()
            chosen_set_key = user_data.get("chosen_set", None)
            if chosen_set_key is None:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
            await callback.message.delete()
            set_info = sets_data[chosen_set_key]
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=(
                    f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í–∞—à –Ω–∞–±–æ—Ä ¬´{set_info['name']}¬ª –∑–∞ {set_info['price']} —Ä—É–±.\n\n"
                    "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ –¥–∞—Ç—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∑–∞–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –Ω–∞–±–æ—Äüîî (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)\n\n"
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–µ—Ä–µ–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞—à–µ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É, –∏ –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!\n\n"
                ),
                reply_markup=after_order_main_menu_kb
            )
            await state.set_state(OrderStates.waiting_for_order_info)

    except Exception as e:
        logger.error(f"Error in handle_callbacks: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


async def send_booking_options(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    chosen_set_key = user_data.get("chosen_set")
    set_info = sets_data.get(chosen_set_key, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "price": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"})

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=(
                "–û—Ç–ª–∏—á–Ω–æ! –£–∂–µ –º–æ–∂–Ω–æ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ—Ç–∫–∏ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ –≤ –≤–æ–∑–¥—É—Ö–µüéÑ!\n\n"
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–±–æ—Ä ¬´{set_info['name']}¬ª —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {set_info['price']} —Ä—É–±.\n\n"
                "–ò—Ç–∞–∫, —Å–ø–æ—Å–æ–±—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
                "1. –û–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏, –µ—Å–ª–∏ –≤—ã –∑–∞–±–µ—Ä–µ—Ç–µ –Ω–∞–±–æ—Ä —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º –≤ —Ç–µ—á–µ–Ω–∏–∏ 2-—É—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ (—Å –∞–¥—Ä–µ—Å–∞ –ù–∏–∫–æ–ª–∞—è –ï—Ä—à–æ–≤–∞ 62–≤)\n\n"
                "2. –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑, –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å 50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –î–ª—è —ç—Ç–æ–≥–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Ç–∞–π–Ω—ã–π —Å–∞–Ω—Ç–∞!\n\n"
                "–ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üéÅ?"
            ),
            reply_markup=order_confirm_kb
        )
    except Exception as e:
        logger.error(f"Error sending booking options: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–æ—Å–æ–±–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


async def delete_photo_messages(state: FSMContext, callback: CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
    """
    user_data = await state.get_data()
    photo_messages = user_data.get("photo_messages", [])
    for pmid in photo_messages:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=pmid)
        except Exception as e:
            logger.warning(f"Failed to delete message {pmid}: {e}")
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
    await state.update_data(photo_messages=[])


@dp.message(OrderStates.waiting_for_order_info)
async def handle_order_info(message: Message, state: FSMContext):
    user_data = await state.get_data()
    chosen_set_key = user_data.get("chosen_set", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–±–æ—Ä")
    chosen_set = sets_data.get(chosen_set_key, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "price": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"})

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã
    filling_info = ""
    if chosen_set_key == "set_1":
        filling_info = user_data.get("filling_choice_little", "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
    elif chosen_set_key == "set_2":
        filling_info = user_data.get("filling_choice_snow", "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
    elif chosen_set_key == "set_3":
        magic_choice_1 = user_data.get("magic_choice_1", "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        magic_choice_2 = user_data.get("magic_choice_2", "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        filling_info = f"–í—ã–±–æ—Ä 1: {magic_choice_1}, –í—ã–±–æ—Ä 2: {magic_choice_2}"

    user_text = message.text
    username = message.from_user.username
    user_id = message.from_user.id

    admin_text = (
        f"–ù–æ–≤—ã–π –ø—Ä–µ–¥–∑–∞–∫–∞–∑!\n\n"
        f"–ò–º—è/–î–∞—Ç–∞: {user_text}\n"
        f"–ù–∞–±–æ—Ä: {chosen_set['name']} (–¶–µ–Ω–∞: {chosen_set['price']} —Ä—É–±)\n"
        f"–í—ã–±–æ—Ä—ã: {filling_info}\n"
        f"Username: @{username if username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'}\n"
        f"User ID: {user_id}\n"
    )

    try:
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–µ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É. –°–∫–æ—Ä–æ –æ–Ω —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏! üéÖ")
    except Exception as e:
        logger.error(f"Error sending admin message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()


@dp.message(QuestionStates.waiting_for_question)
async def handle_user_question(message: Message, state: FSMContext):
    question_text = message.text
    username = message.from_user.username
    user_id = message.from_user.id

    admin_text = (
        f"–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!\n\n"
        f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: {question_text}\n"
        f"Username: @{username if username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'}\n"
        f"User ID: {user_id}\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π –≤–∏–¥–∞:\n"
        "/answer USER_ID –í–∞—à –æ—Ç–≤–µ—Ç"
    )

    try:
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text)
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–µ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É! –û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    except Exception as e:
        logger.error(f"Error sending question to admin: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()


@dp.message(Command("answer"))
async def admin_answer(message: Message, command: CommandObject):
    if str(message.from_user.id) != str(ADMIN_CHAT_ID):
        return  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /answer USER_ID –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")
        return

    user_id = args[1]
    answer_text = args[2]

    try:
        user_id_int = int(user_id)
    except ValueError:
        await message.answer("User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    try:
        await bot.send_message(chat_id=user_id_int, text=f"–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞:\n\n{answer_text}")
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        logger.error(f"Error sending answer to user {user_id_int}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ----------- –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è Render -----------
async def handle(request):
    return web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")


async def keep_alive():
    while True:
        try:
            await bot.get_me()
            logger.info("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        await asyncio.sleep(600)


async def start_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()


async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    loop = asyncio.get_event_loop()
    loop.create_task(keep_alive())
    loop.create_task(start_server())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
